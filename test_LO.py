"""Test"""

import time
import unittest
import tracemalloc
import csv
import os
import cv2
import numpy as np
import pytest
import Record
import distanceCalc
import LOUsageMapGenerator
import googleUpload
import config


class TestLO(unittest.TestCase):

    def setUp(self):
        config.TEST_MODE = 1
        tracemalloc.start()
        self.start_time = time.time()
        self.fimage = r'images/61-402layout.png'
        self.first_image = r'images/61-402layout.png'
        #self.x1 = np.array([635.0, 347.0])
        #self.y1 = np.array([636.0, 349.0])
        self.x1 = np.array([400.0, 200.0])
        self.y1 = np.array([250.0, 270.0])
        self.count = 37
        self.occupancy = 1
        #self.coordinates = [[635.0, 636.0], [347.0, 349.0]]
        self.coordinates = [[400.0, 250.0], [200.0, 270.0]]
        self.color = 'b'
        self.raw_image = self.fimage
        #self.change_coordinates = [[635.0, 636.0], [347.0, 349.0]]
        #self.person_coordinates = [[637.0, 639.0], [348.0, 342.0]]
        self.change_coordinates = [[400.0, 250.0], [200.0, 270.0]]
        self.person_coordinates = [[202.0, 272.0], [201.0, 265.0]]
        self.name = 'test_data'
        self.file = 'test_data'
        self.file_meta_data = {'name': 'test_data', 'time': time.strftime(
            '%b-%d-%Y_%H%M%S', time.localtime())}
        self.output_epmty_array = []
        #self.filtered_array = np.array([(347.0, 349.0)])
        self.filtered_array = np.array([(400.0, 250.0),(200.0, 270.0), (200.0, 270.0),(200.0, 270.0)])
        self.image_data = cv2.imread(self.first_image)
        #what does the function that receives change do?
        self.change = np.array([[256, 452], [253, 443], [251, 439], [255, 435], [254, 435], [256, 435], [257, 431], [254, 432], [247, 428], [254, 424], [269, 421], [273, 421], [272, 421], [268, 421], [270, 421], [269, 420], [271, 420], [273, 416], [561, 375], [268, 417], [570, 379], [266, 418], [572, 380], [264, 418], [574, 381], [265, 416], [574, 382], [267, 418], [574, 383], [265, 418], [574, 384], [202, 428], [276, 417], [573, 385], [274, 417], [573, 385], [270, 417], [568, 390], [269, 418], [569, 389], [278, 417], [568, 390], [286, 415], [568, 390], [289, 414], [568, 390], [291, 414], [568, 390], [291, 414], [568, 391], [291, 414], [568, 391], [288, 414], [568, 391], [283, 415], [568, 391], [278, 415], [568, 391], [273, 415], [568, 391], [269, 416], [568, 391], [267, 416], [568, 391], [201, 428], [273, 415], [569, 392], [202, 428], [243, 433], [327, 401], [569, 391], [200, 429], [242, 433], [356, 401], [570, 391], [232, 432], [379, 398], [570, 391], [231, 432], [394, 393], [570, 390], [231, 433], [402, 389], [570, 390], [232, 432], [399, 394], [570, 390], [232, 433], [375, 397], [570, 390], [200, 428], [241, 434], [346, 402], [570, 391], [199, 428], [285, 417], [570, 391], [199, 429], [277, 423], [570, 391], [270, 423], [570, 391], [263, 423], [570, 391], [249, 425], [571, 389], [241, 426], [571, 389], [234, 428], [574, 386], [235, 430], [575, 386], [241, 433], [574, 386], [247, 435], [574, 386], [255, 440], [574, 386], [257, 454], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385], [575, 385]])
        self.moving = np.array([[256, 452],[253, 443],[251, 439],[255, 435],[254, 435],[256, 435],[257, 431],[254, 432],[247, 428],[254, 424],[269, 421],[273, 421],[272, 421],[268, 421],[270, 421],[269, 420],[271, 420],[273, 416],[561, 375], [268, 417], [266, 418], [572, 380], [264, 418], [574, 381], [265, 416], [574, 382], [267, 418], [574, 383], [265, 418], [574, 384], [202, 428], [276, 417], [274, 417], [270, 417], [269, 418], [569, 389], [278, 417], [286, 415], [289, 414], [291, 414], [291, 414], [291, 414], [288, 414], [283, 415], [278, 415], [273, 415], [269, 416], [267, 416], [201, 428], [273, 415], [569, 392], [202, 428], [243, 433], [327, 401], [200, 429], [242, 433], [356, 401], [232, 432], [379, 398], [231, 432], [394, 393], [231, 433], [402, 389], [232, 432], [399, 394], [232, 433], [375, 397], [200, 428], [241, 434], [346, 402], [199, 428], [285, 417], [199, 429], [277, 423], [270, 423], [263, 423], [249, 425], [571, 389], [241, 426], [571, 389], [234, 428], [235, 430], [241, 433], [247, 435], [255, 440], [257, 454], [253, 443], [255, 435], [247, 428], [254, 424], [269, 421], [276, 417], [286, 415], [283, 415], [201, 428], [273, 415], [243, 433], [327, 401], [200, 429], [242, 433], [356, 401], [232, 432], [375, 397], [241, 434], [346, 402], [199, 428], [285, 417], [199, 429], [277, 423], [270, 423], [263, 423], [249, 425], [241, 433], [247, 435], [255, 440], [257, 454], [253, 443]])
        self.still = np.array
        #self.change = np.array([[261, 359], [358, 305], [829, 547], [831, 545], [831, 545],[831, 542],[830, 544],[397, 279],  [212, 420],[395,  27], [242, 711], [550, 522], [357, 357], [261, 359], [358, 358]])
        #self.moving = np.array([[261, 359], [358, 305], [829, 547], [831, 545], [831, 545],[831, 542],[830, 544],[397, 279],  [212, 420],     [395,  27]])
        #self.still = np.array([[242, 711], [550, 522], [357, 357], [261, 359], [358, 358]])

        self.f = open('Test.csv', "w")
        self.writer = csv.DictWriter(self.f, fieldnames=[
                                "Timestamp", "Furniture_Type", "Usage_Count", "Total_Checks","Usage_Percentage","Usage_Type", "Room_Occupancy", "Device_ID"])

        self.writer.writeheader()
        self.used_furn_layout = np.array([['Door', 230, 1400, 200, 150, 1]], dtype='<U6')
        self.furniture_name = ['Door']
        self.PatchesWarm = np.array([[1]])

    def tearDown(self):
        tracemalloc.stop()
        self.f.close()

    '''Record.py'''

    def test_change_detection(self):
        results = Record.change_detection(self.fimage, self.first_image)
        self.assertEqual(results[2], 0)
        self.assertEqual(results[1], self.output_epmty_array)
        self.assertEqual(results[0].all(), self.image_data.all())
        
    def test_recording(self):
       results = Record.start_recording(self.start_time)
       self.assertEqual(results[0].any(), self.change.any())

    '''distanceCal.py'''
    def test_distanceCalculator(self):
        result = distanceCalc.distance_calculator(self.x1, self.y1, 1, self.writer,self.count)
        self.assertEqual(result[0].all(), self.filtered_array.all())
       
        #self.assertEqual(distanceCalc.distance_calculator(self.x1, self.y1, 1, self.writer,self.count).all(), self.filtered_array.all())

    def test_iterateNPlot(self):
        results = distanceCalc.iterate(self.coordinates)
        self.assertEqual(results[0].all(), self.x1.all())
        self.assertEqual(results[1].all(), self.y1.all())
        
    def test_check_continuity(self):
        results = distanceCalc.check_continuity(self.change, [], []) 
        self.assertEqual(results[0][0].all(), self.moving[0].all())
        self.assertEqual(results[1][0].all(), self.still[0].all())

    def test_calculateAndMap(self):
        distanceCalc.calculate_and_map(self.raw_image, self.change_coordinates, self.writer, self.count)

    '''LOUsageMapGenerator.py'''
    def test_createZip(self):
        LOUsageMapGenerator.create_zip(self.name)
        self.assertTrue(os.path.exists('test_data.zip'))
        
    def test_generateMap(self):
        LOUsageMapGenerator.generate_map()

    '''googleUpload'''

    def test_fileUpload(self):
        LOUsageMapGenerator.create_zip(self.name)
        self.assertIsInstance(googleUpload.upload_files(self.file, self.file_meta_data).get('id'), str)

    """ Layiterate: Test loop functionality and empty layout coordinate lists"""
    def test_LayoutIterate(self):
       result = distanceCalc.Layiterate(self.used_furn_layout)
       self.assertEqual(result[0], self.furniture_name)
       self.assertEqual(len(result), 6)
       self.assertRaises(Exception,distanceCalc.Layiterate,self.output_epmty_array)
    
    """ Test that only configurated colors are added"""
    def test_start_plot_layout(self):
        self.assertRaises(Exception,distanceCalc.start_plot_layout,self.used_furn_layout,"g")


if __name__ == "__main__":
    unittest.main()
